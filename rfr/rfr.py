# -*- coding: utf-8 -*-
"""RandomForestRegression.ipynb

Automatically generated by Colab.
"""

#imports and packages
import pandas as pd
import numpy as np
from pydataset import data
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import mean_squared_error

"""**Reading in Data from Excel file**"""

#Method 1
pd.read_csv("CarbonEmissions.csv")

#checking the file routing
pwd

pd.read_csv("C:\\Users\\RahulKumar\\Downloads\\TerraHacks\\CarbonEmissions.csv")

#Method 2
CarbonEmissions=pd.read_csv("C:\\Users\\RahulKumar\\Downloads\\TerraHacks\\CarbonEmissions.csv")

CarbonEmissions.head()

#Method 3
CarbonEmissions_excel = pd.read_excel(CarbonEmissions.csv)

CarbonEmissions.head()

"""***Data Prep***: In this step, I'm just trying to remove the NA variables in the data, thus cleaning it and making it easiar to work with."""

df=data("carbonEmissions")
df

df=df.dropna()

df

#The var we are determining the importance of are X and dependant var is y
X = df[['length', 'width', 'height', 'squareFeet', 'buildingType']]
y = df['carbonEmissions']

"""**Model and Testing**"""

#I am splitting the train and test sets using a 30/70 split and using 100 trees
x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0)
h=RandomForestRegressor(n_estimators=100, random_state=1)

h.fit(x_train, y_train)
y_pred=h.predict(x_test)
mean_squared_error(y_test, y_pred)

"""**Determining Variable Importance**: Althought the MSE of the model is important to compare models. We need the variable's importance to calculate the Carbon Rating in Enfra."""

#Displaying as a horizontal bar graph, which I will read the data from
model_ranks=pd.Series(h.feature_importances_,index=x_train.columns,name="Importance").sort_values(ascending=True,inplace=False)
ax=model_ranks.plot(kind='barh')

"""**Conclusion:** As seen in the model, the best way to predict is the carbon emissions/footprint is by weighing the squareFeet and buildingType heavier. I will now roughly use these weights to create a CarbonEmissions function in Typescript."""